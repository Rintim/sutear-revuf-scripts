{
  "version": 3,
  "sources": ["mod.tsx", "download.tsx", "mutex.ts"],
  "sourcesContent": ["import JSZip from \"jszip\";\r\nimport { h, Fragment, render } from \"preact\";\r\n\r\nimport type { FileData, FileList } from \"./type\";\r\nimport { App as DownloadApp } from \"./download\";\r\n\r\nexport async function downloadFiles(\r\n\tfiles: Record<string, FileData>,\r\n\tname: string = \"game\",\r\n\tbody: HTMLElement = document.body,\r\n) {\r\n\tlet fileList = Object.entries(files);\r\n\r\n\tlet bodyChildElements = Array.from(body.childNodes).filter(\r\n\t\tchild => child instanceof HTMLElement,\r\n\t) as unknown as HTMLElement[];\r\n\tlet originHiddenStatus = init(bodyChildElements);\r\n\r\n\tlet fileContents = await download(fileList, body);\r\n\tconsole.log(fileContents);\r\n}\r\n\r\nfunction init(children: HTMLElement[]) {\r\n\treturn children.map(child => {\r\n\t\tlet status = child.hidden;\r\n\t\tchild.hidden = true;\r\n\t\treturn status;\r\n\t});\r\n}\r\n\r\nasync function download(map: FileList, body: HTMLElement = document.body): Promise<Map<string, Blob>> {\r\n\tlet element = document.createElement(\"main\");\r\n\r\n\telement.style.width = \"100%\";\r\n\telement.style.height = \"100%\";\r\n\telement.style.backgroundColor = \"white\";\r\n\tbody.appendChild(element);\r\n\telement.innerHTML = `<p>Current Downloading:</p>`;\r\n\r\n\tlet result = await new Promise<Map<string, Blob>>(\r\n\t\tresolve => void render(<DownloadApp files={map} onFinished={resolve} />, element),\r\n\t);\r\n\r\n\telement.remove();\r\n\treturn result;\r\n}\r\n", "import { h, Fragment, JSX } from \"preact\";\r\nimport { useSignal, useComputed, useSignalEffect } from \"@preact/signals\";\r\n\r\nimport type { FileList } from \"./type\";\r\nimport { Mutex } from \"./mutex\";\r\n\r\nexport function App(props: DownloadProps) {\r\n\tconst coreNumber = navigator.hardwareConcurrency;\r\n\r\n\tlet downloadingNames = useSignal([] as string[]);\r\n\tlet downloadingProgress = useSignal({} as Record<string, number>);\r\n\tlet downloadingInfo = useComputed(() => {\r\n\t\tlet result: JSX.Element[] = [];\r\n\t\tlet progress = downloadingProgress.value;\r\n\r\n\t\tfor (let name of downloadingNames.value) {\r\n\t\t\tresult.push(\r\n\t\t\t\t<li>\r\n\t\t\t\t\t{name}: {progress[name]}%\r\n\t\t\t\t</li>,\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t});\r\n\r\n\tlet mutex = new Mutex();\r\n\tuseSignalEffect(() => {\r\n\t\tlet length = downloadingNames.value.length;\r\n\r\n\t\tif (length > coreNumber) mutex.lock();\r\n\t\telse mutex.unlock();\r\n\t});\r\n\r\n\tqueueMicrotask(async () => {\r\n\t\tlet result = new Map<string, Blob>();\r\n\r\n\t\tlet files = props.files.slice(0);\r\n\t\tlet totalLength = files.length;\r\n\t\tlet currentLength = 0;\r\n\r\n\t\twhile (files.length) {\r\n\t\t\tawait mutex.wait();\r\n\r\n\t\t\tlet [name, data] = files.shift();\r\n\t\t\tlet url = data.url();\r\n\r\n\t\t\ttry {\r\n\t\t\t\tlet response = await fetch(url, {\r\n\t\t\t\t\tcredentials: \"same-origin\",\r\n\t\t\t\t\theaders: new Headers({\r\n\t\t\t\t\t\t\"User-Agent\": navigator.userAgent,\r\n\t\t\t\t\t}),\r\n\t\t\t\t});\r\n\r\n\t\t\t\tlet current = 0;\r\n\t\t\t\tlet total = parseInt(response.headers.get(\"content-length\"));\r\n\t\t\t\tlet reader = response.body.getReader();\r\n\t\t\t\tlet resultCollection = [] as Uint8Array[];\r\n\r\n\t\t\t\tdownloadingProgress.value = {\r\n\t\t\t\t\t...downloadingProgress.value,\r\n\t\t\t\t\tname: 0,\r\n\t\t\t\t};\r\n\t\t\t\tdownloadingNames.value = [...downloadingNames.value, name];\r\n\r\n\t\t\t\treader.read().then(function read({ value, done }) {\r\n\t\t\t\t\tif (done) {\r\n\t\t\t\t\t\tresult.set(name, new Blob(resultCollection));\r\n\t\t\t\t\t\tdownloadingProgress.value = {\r\n\t\t\t\t\t\t\t...downloadingProgress.value,\r\n\t\t\t\t\t\t\tname: undefined,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tdelete downloadingProgress.value[name];\r\n\t\t\t\t\t\tdownloadingNames.value = downloadingNames.value.filter(key => key != name);\r\n\r\n\t\t\t\t\t\tif (++currentLength >= totalLength) {\r\n\t\t\t\t\t\t\tprops.onFinished(result);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresultCollection.push(value);\r\n\t\t\t\t\tcurrent += value.byteLength;\r\n\r\n\t\t\t\t\tdownloadingProgress.value = {\r\n\t\t\t\t\t\t...downloadingProgress.value,\r\n\t\t\t\t\t\tname: Math.floor((current / total) * 100) / 100,\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn reader.read().then(read);\r\n\t\t\t\t});\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.error(`${name}: ${e}`);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h1>Current Downloading</h1>\r\n\t\t\t<ul>{downloadingInfo}</ul>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport interface DownloadProps {\r\n\tfiles: FileList;\r\n\r\n\tonFinished: (values: Map<string, Blob>) => void;\r\n}\r\n", "export class Mutex {\r\n\tprivate promise?: Promise<void>;\r\n\tprivate resolve?: () => void;\r\n\r\n\tlock() {\r\n\t\tif (!this.promise) {\r\n\t\t\tthis.promise = new Promise(resolve => void (this.resolve = resolve));\r\n\t\t}\r\n\t}\r\n\r\n\tunlock() {\r\n\t\tif (this.promise) {\r\n\t\t\tthis.resolve?.();\r\n\t\t\tthis.resolve = undefined;\r\n\t\t\tthis.promise = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\twait() {\r\n\t\treturn this.promise ?? Promise.resolve();\r\n\t}\r\n}\r\n"],
  "mappings": "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",
  "names": ["h", "render", "h", "Fragment", "useSignal", "useComputed", "useSignalEffect", "Mutex", "resolve", "App", "props", "coreNumber", "downloadingNames", "useSignal", "downloadingProgress", "downloadingInfo", "useComputed", "result", "progress", "name", "h", "mutex", "Mutex", "useSignalEffect", "files", "totalLength", "currentLength", "data", "url", "response", "current", "total", "reader", "resultCollection", "read", "value", "done", "key", "e", "Fragment", "downloadFiles", "files", "name", "body", "fileList", "bodyChildElements", "child", "originHiddenStatus", "init", "fileContents", "download", "children", "status", "map", "element", "result", "resolve", "render", "h", "App"]
}
